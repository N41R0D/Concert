security:
    encoders:
        App\Entity\User:
            algorithm: auto

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        registration:
            pattern: ^/api/users
            stateless: true
            anonymous: true
            methods: [POST]
        login:
            pattern: ^/api/login
            stateless: true
            anonymous: true
            json_login:
                check_path: /api/login_check
                username_path: username
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
        api:
            pattern: ^/api
            stateless: true
            anonymous: true
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator
        main:
            anonymous: lazy
            provider: app_user_provider

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
#        - { path: ^/api/login_check, roles: IS_AUTHENTICATED_ANONYMOUSLY, methods: [ POST ] } #On peut faire une requete POST sans etre connecté (plus pratique)
#        - { path: ^/api/users, roles: IS_AUTHENTICATED_ANONYMOUSLY, methods: [ POST ] } # Permet de s'inscrire sans etre connecté
#        - { path: ^/api/privatisation, roles: IS_AUTHENTICATED_ANONYMOUSLY, methods: [ POST ] } # Permet a une personne non conncecté de faire une demande de privatisation (sachant qu'il y a un formulaire dans la maquette, je n'ai pas rattaché la demande a un utilisateur)
#        - { path: ^/api/users, roles: IS_AUTHENTICATED_FULLY, methods: [ GET ] } #Demande a etre connecté (peut importe le Role, pour faire une recherche GET sur la route USER
#        # Ligne a decomenter à la fin du projet pour rendre la plateforme de concert sécurisé
#        - { path: ^/api/reservation, roles: IS_AUTHENTICATED_FULLY, methods: [ POST, GET ] } # Pour entrer ou voir une reservation, il faut etre connecté
#        - { path: ^/api/concert, roles: IS_AUTHENTICATED_ANONYMOUSLY, methods: [ GET ] } # Permet de voir la liste des concert sur la page d'accueil sans etre connecté
#        - { path: ^/api/articles, roles: IS_AUTHENTICATED_ANONYMOUSLY, methods: [ GET ] } # Permet de voir la liste des articles sans etre connecté
#        - { path: ^/api/lieus, roles: IS_AUTHENTICATED_ANONYMOUSLY, methods: [ GET ] } # Permet de voir la liste des lieux sans etre connecté
#        - { path: ^/api/concert, roles: ROLE_ADMIN, methods: [ POST ] } # Demande a etre admin pour entrer un nouveau concert
#        - { path: ^/api/, roles: IS_AUTHENTICATED_FULLY, methods: [ GET ] } # Permet a une personne connecter de faire le reste des requette GET (si non spécifié au dessus)
#        - { path: ^/api/, roles: ROLE_ADMIN, methods: [POST, PUT, DELETE]} #Demande a avoir le role Admin pour effectuer le reste des requete POST ainsi que les PUT et DELETE
#        - { path: ^/api/, roles: ROLE_ADMIN} #Au cas où...